# -*- coding: utf-8 -*-
"""(P) Cox PH Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NwRTaS1S246oXeIMk-RTi2mk5Hnv5ilM
"""

pip install -q lifelines

import pandas as pd

def read_data():
  data = pd.read_excel('/content/Data_FD_SVM_New.xlsx')
  return data

data = read_data()
data.head()

data.info()

print(data.columns)

data.describe()

columns_to_scale = ['DAR', 'CR', 'ukuran', 'GPM', 'umur', 'NPM', 'Cash_Ratio']

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

data[columns_to_scale] = scaler.fit_transform(data[columns_to_scale])

data_new = data.drop(columns=["Nama Perusahaan"])
data_new

import matplotlib.pyplot as plt

# Hitung jumlah perusahaan yang mengalami dan tidak mengalami financial distress
distress_counts = data['Y'].value_counts()

# Siapkan data untuk pie chart
labels = ['Tidak Mengalami Financial Distress', 'Mengalami Financial Distress']
sizes = [distress_counts[0], distress_counts[1]]
colors = ['lightblue', 'lightcoral']
explode = (0.1, 0)  # Pemisahan slide untuk 'Not Distressed'

# Buat pie chart
plt.figure(figsize=(7, 5))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')  # Memastikan pie chart berbentuk lingkaran
plt.title('Proporsi Perusahaan Berdasarkan Kondisi Financial Distress')
plt.show()

import matplotlib.pyplot as plt
from lifelines import KaplanMeierFitter
from lifelines.statistics import logrank_test

# Inisialisasi KaplanMeierFitter

kmf = KaplanMeierFitter()

# Memisahkan data berdasarkan leverage di atas dan di bawah median
median_DAR = data['DAR'].median()
DAR_above_median = data[data['DAR'] > median_DAR]
DAR_below_median = data[data['DAR'] <= median_DAR]

# Menghitung survival probability untuk kelompok leverage di atas dan di bawah median
kmf.fit(DAR_above_median['t'], event_observed=DAR_above_median['Y'], label='Debt to Asset Ratio Above Median')
ax = kmf.plot()

kmf.fit(DAR_below_median['t'], event_observed=DAR_below_median['Y'], label='Debt to Asset Ratio Below Median')
ax = kmf.plot(ax=ax)

# Menambahkan judul dan label sumbu
plt.title('Kaplan-Meier Curve for Debt to Asset Ratio')
plt.xlabel('Time')
plt.ylabel('Survival Probability')
plt.show()

# Melakukan uji log-rank
results = logrank_test(DAR_above_median['t'], DAR_below_median['t'], DAR_above_median['Y'], DAR_below_median['Y'])
print(results.print_summary())

# Inisialisasi KaplanMeierFitter
kmf = KaplanMeierFitter()

# Memisahkan data berdasarkan profitabilitas di atas dan di bawah median
median_CR = data['CR'].median()
CR_above_median = data[data['CR'] > median_CR]
CR_below_median = data[data['CR'] <= median_CR]

# Menghitung survival probability untuk kelompok profitabilitas di atas dan di bawah median
kmf.fit(CR_above_median['t'], event_observed=CR_above_median['Y'], label='Current Ratio Above Median')
ax = kmf.plot()

kmf.fit(CR_below_median['t'], event_observed=CR_below_median['Y'], label='Current Ratio Below Median')
ax = kmf.plot(ax=ax)

# Menambahkan judul dan label sumbu
plt.title('Kaplan-Meier Curve for Current Ratio')
plt.xlabel('Time')
plt.ylabel('Survival Probability')
plt.show()

# Melakukan uji log-rank
results = logrank_test(CR_above_median['t'], CR_below_median['t'], CR_above_median['Y'], CR_below_median['Y'])
print(results.print_summary())

# Inisialisasi KaplanMeierFitter
kmf = KaplanMeierFitter()

# Memisahkan data berdasarkan likuiditas di atas dan di bawah median
median_ukuran = data['ukuran'].median()
ukuran_above_median = data[data['ukuran'] > median_ukuran]
ukuran_below_median = data[data['ukuran'] <= median_ukuran]

# Menghitung survival probability untuk kelompok likuiditas di atas dan di bawah median
kmf.fit(ukuran_above_median['t'], event_observed=ukuran_above_median['Y'], label='Ukuran Perusahaan Above Median')
ax = kmf.plot()

kmf.fit(ukuran_below_median['t'], event_observed=ukuran_below_median['Y'], label='Ukuran Perusahaan Below Median')
ax = kmf.plot(ax=ax)

# Menambahkan judul dan label sumbu
plt.title('Kaplan-Meier Curve for Ukuran Perusahaan')
plt.xlabel('Time')
plt.ylabel('Survival Probability')
plt.show()

# Melakukan uji log-rank
results = logrank_test(ukuran_above_median['t'], ukuran_below_median['t'], ukuran_above_median['Y'], ukuran_below_median['Y'])
print(results.print_summary())

# Inisialisasi KaplanMeierFitter
kmf = KaplanMeierFitter()

# Memisahkan data berdasarkan salesgrowth di atas dan di bawah median
median_GPM = data['GPM'].median()
GPM_above_median = data[data['GPM'] > median_GPM]
GPM_below_median = data[data['GPM'] <= median_GPM]

# Menghitung survival probability untuk kelompok salesgrowth di atas dan di bawah median
kmf.fit(GPM_above_median['t'], event_observed=GPM_above_median['Y'], label='GPM Above Median')
ax = kmf.plot()

kmf.fit(GPM_below_median['t'], event_observed=GPM_below_median['Y'], label='GPM Below Median')
ax = kmf.plot(ax=ax)

# Menambahkan judul dan label sumbu
plt.title('Kaplan-Meier Curve for GPM')
plt.xlabel('Time')
plt.ylabel('Survival Probability')
plt.show()

# Melakukan uji log-rank
results = logrank_test(GPM_above_median['t'], GPM_below_median['t'], GPM_above_median['Y'], GPM_below_median['Y'])
print(results.print_summary())

# Inisialisasi KaplanMeierFitter
kmf = KaplanMeierFitter()

# Memisahkan data berdasarkan ukuran di atas dan di bawah median
median_umur = data['umur'].median()
umur_above_median = data[data['umur'] > median_umur]
umur_below_median = data[data['umur'] <= median_umur]

# Menghitung survival probability untuk kelompok ukuran di atas dan di bawah median
kmf.fit(umur_above_median['t'], event_observed=umur_above_median['Y'], label='Umur Perusahaan Above Median')
ax = kmf.plot()

kmf.fit(umur_below_median['t'], event_observed=umur_below_median['Y'], label='Umur Perusahaan Below Median')
ax = kmf.plot(ax=ax)

# Menambahkan judul dan label sumbu
plt.title('Kaplan-Meier Curve for Umur Perusahaan')
plt.xlabel('Time')
plt.ylabel('Survival Probability')
plt.show()

# Melakukan uji log-rank
results = logrank_test(umur_above_median['t'], umur_below_median['t'], umur_above_median['Y'], umur_below_median['Y'])
print(results.print_summary())

# Inisialisasi KaplanMeierFitter
kmf = KaplanMeierFitter()

# Memisahkan data berdasarkan gpm di atas dan di bawah median
median_NPM = data['NPM'].median()
NPM_above_median = data[data['NPM'] > median_NPM]
NPM_below_median = data[data['NPM'] <= median_NPM]

# Menghitung survival probability untuk kelompok gpm di atas dan di bawah median
kmf.fit(NPM_above_median['t'], event_observed=NPM_above_median['Y'], label='NPM Above Median')
ax = kmf.plot()

kmf.fit(NPM_below_median['t'], event_observed=NPM_below_median['Y'], label='NPM Below Median')
ax = kmf.plot(ax=ax)

# Menambahkan judul dan label sumbu
plt.title('Kaplan-Meier Curve for NPM')
plt.xlabel('Time')
plt.ylabel('Survival Probability')
plt.show()

# Melakukan uji log-rank
results = logrank_test(NPM_above_median['t'], NPM_below_median['t'], NPM_above_median['Y'], NPM_below_median['Y'])
print(results.print_summary())

# Inisialisasi KaplanMeierFitter
kmf = KaplanMeierFitter()

# Memisahkan data berdasarkan umur di atas dan di bawah median
median_cash = data['Cash_Ratio'].median()
cash_above_median = data[data['Cash_Ratio'] > median_cash]
cash_below_median = data[data['Cash_Ratio'] <= median_cash]

# Menghitung survival probability untuk kelompok umur di atas dan di bawah median
kmf.fit(cash_above_median['t'], event_observed=cash_above_median['Y'], label='Cash Ratio Above Median')
ax = kmf.plot()

kmf.fit(cash_below_median['t'], event_observed=cash_below_median['Y'], label='Cash Ratio Below Median')
ax = kmf.plot(ax=ax)

# Menambahkan judul dan label sumbu
plt.title('Kaplan-Meier Curve for Cash Ratio')
plt.xlabel('Time')
plt.ylabel('Survival Probability')
plt.show()

# Melakukan uji log-rank
results = logrank_test(cash_above_median['t'], cash_below_median['t'], cash_above_median['Y'], cash_below_median['Y'])
print(results.print_summary())

data_KM = pd.read_excel('/content/Hasil Pengelompokan.xlsx', sheet_name="Sheet 1")

# Inisialisasi KaplanMeierFitter
kmf = KaplanMeierFitter()

# Memisahkan data berdasarkan umur di atas dan di bawah median
median_rank = data_KM['Rank'].median()
rank_above_median = data_KM[data_KM['Rank'] > median_rank]
rank_below_median = data_KM[data_KM['Rank'] <= median_rank]

# Menghitung survival probability untuk kelompok umur di atas dan di bawah median
kmf.fit(rank_above_median['T'], event_observed=rank_above_median['Y'], label='Low Risk')
ax = kmf.plot()

kmf.fit(rank_below_median['T'], event_observed=rank_below_median['Y'], label='High Risk')
ax = kmf.plot(ax=ax)

# Menambahkan judul dan label sumbu
plt.title('Kaplan-Meier Curve for Risk Classification')
plt.xlabel('Time')
plt.ylabel('Survival Probability')
plt.show()

# Melakukan uji log-rank
results = logrank_test(rank_above_median['T'], rank_below_median['T'], rank_above_median['Y'], rank_below_median['Y'])
print(results.print_summary())

"""Nilai p sebesar 0,04 menunjukkan bahwa terdapat bukti yang cukup untuk menolak hipotesis nol pada tingkat signifikansi 0,05. Artinya, terdapat perbedaan yang signifikan antara distribusi waktu kejadian antar kelompok.

Uji Asumsi Proportional Hazard
"""

from lifelines import CoxPHFitter
from lifelines.statistics import proportional_hazard_test

# Membuat model Cox Proportional Hazard
cph = CoxPHFitter()

# Melakukan fitting model ke data
cph.fit(data, duration_col='t', event_col='Y', formula='DAR + CR + umur + ukuran + GPM + NPM + Cash_Ratio')

# Melakukan uji asumsi proporsionalitas hazard menggunakan uji residual Schoenfeld
test_results = proportional_hazard_test(cph, data, time_transform='rank', kind='schoenfeld')
print(test_results)

global_test = cph.check_assumptions(data, p_value_threshold=0.1)
print("Global Test Results:")
print(global_test)

"""Pada contoh output yang diberikan, variabel-variabel seperti gpm, leverage, likuiditas, profitabilitas, ukuran, dan umur semuanya memiliki nilai p yang cukup tinggi (lebih besar dari 0.05), yang menunjukkan bahwa tidak ada cukup bukti untuk menolak asumsi bahwa hazard proporsionalitas konstan sepanjang waktu untuk variabel-variabel tersebut.

Hal ini menunjukkan bahwa asumsi proporsionalitas hazard terpenuhi untuk semua variabel dalam analisis.

Pembentukan Model Awal Regresi
"""

# Menampilkan ringkasan model
print(cph.print_summary())
c_index = cph.concordance_index_
print("Concordance Index (C-index):", c_index)

summary = cph.summary
alpha = 0.10
z = 1.645  # Z-score untuk interval kepercayaan 90%

# Menghitung batas bawah dan atas untuk interval kepercayaan 90%
summary['coef lower 90%'] = summary['coef'] - z * summary['se(coef)']
summary['coef upper 90%'] = summary['coef'] + z * summary['se(coef)']
summary['exp(coef) lower 90%'] = summary['exp(coef) lower 95%'] ** (1 - 2 * alpha / 2)
summary['exp(coef) upper 90%'] = summary['exp(coef) upper 95%'] ** (1 + 2 * alpha / 2)

# Menampilkan ringkasan yang diperbarui
print(summary)

# Menghitung dan menampilkan Concordance Index (C-index)
c_index = cph.concordance_index_
print("Concordance Index (C-index):", c_index)

"""Koefisien (coef):

Koefisien menunjukkan arah dan besar perubahan log-hazard rate (log-hasil rasio hazard) untuk setiap satuan perubahan dalam variabel independen.
Nilai negatif menunjukkan bahwa semakin tinggi nilai variabel independen, semakin rendah risiko terjadinya kejadian (distress), dan sebaliknya untuk nilai positif.

Koefisien ini diperkirakan menggunakan metode Maksimum Likelihood Estimation (MLE).

Uji Serentak
"""

# Uji signifikansi terhadap keseluruhan model dengan uji likelihood ratio
likelihood_ratio_test = cph.log_likelihood_ratio_test()
print("Hasil uji signifikansi menggunakan likelihood ratio test:")
print(likelihood_ratio_test)

"""Hasil uji signifikansi menggunakan likelihood ratio test menunjukkan bahwa terdapat bukti yang sangat kuat (p-value < 0.005) untuk menolak hipotesis nol bahwa tidak ada efek signifikan dari setidaknya satu variabel dalam model Cox Proportional Hazards.

Dengan nilai test_statistic sebesar 76.50 dan p-value yang sangat kecil, kita memiliki keyakinan yang tinggi bahwa setidaknya satu variabel dalam model memiliki pengaruh yang signifikan terhadap risiko kejadian yang diamati.

Uji Parsial
"""

# Menampilkan hasil uji signifikansi terhadap masing-masing koefisien
print("Hasil uji signifikansi terhadap masing-masing koefisien (uji Wald):")
print(cph.summary)

"""Nilai p yang rendah (< 0.05) menunjukkan bahwa variabel tersebut memiliki pengaruh yang signifikan terhadap risiko kejadian. (variabel "likuiditas" dan "salesgrowth" memiliki nilai p yang rendah (<0.05), sehingga dapat disimpulkan bahwa variabel-variabel ini memiliki pengaruh yang signifikan terhadap risiko kejadian. Sedangkan variabel lainnya tidak memiliki pengaruh yang signifikan.)

Koefisien positif menunjukkan bahwa risiko kejadian meningkat dengan meningkatnya nilai variabel, sedangkan koefisien negatif menunjukkan bahwa risiko kejadian menurun dengan meningkatnya nilai variabel.

Backward Elimination
"""

# Inisialisasi model
cph = CoxPHFitter()

# Fit model awal
print("Fit model awal:")
cph.fit(data_new, duration_col='t', event_col='Y', formula='DAR + CR + ukuran + GPM + umur + NPM + Cash_Ratio')
print(cph.summary)
print()

# Lakukan backward selection
p_values = cph.summary['p']  # Ambil nilai p untuk setiap variabel
max_p_value = p_values.idxmax()  # Ambil variabel dengan p-value tertinggi
iteration = 1

while p_values[max_p_value] > 0.1:  # Ulangi selama variabel dengan p-value tertinggi > 0.1
    print(f"Iteration {iteration}:")
    print(f"Variabel dengan p-value tertinggi: {max_p_value}, p-value: {p_values[max_p_value]}")
    data_new = data_new.drop(columns=[max_p_value])  # Hapus variabel dengan p-value tertinggi
    cph.fit(data_new, duration_col='t', event_col='Y')
    print()
    p_values = cph.summary['p']  # Perbarui nilai p untuk setiap variabel
    print(cph.summary)
    print(cph.print_summary())
    max_p_value = p_values.idxmax()  # Ambil variabel dengan p-value tertinggi
    iteration += 1

# Tampilkan hasil akhir
print("Variabel yang dipilih setelah backward selection:")
print(data.columns)
print("\nSummary model:")
print(cph.summary)

print(cph.print_summary())
c_index = cph.concordance_index_
print("Concordance Index (C-index):", c_index)

"""Uji parsial dan serentak model terbaik"""

# Uji signifikansi terhadap keseluruhan model dengan uji likelihood ratio
likelihood_ratio_test = cph.log_likelihood_ratio_test()
print("Hasil uji signifikansi menggunakan likelihood ratio test:")
print(likelihood_ratio_test)

# Menampilkan hasil uji signifikansi terhadap masing-masing koefisien
print("Hasil uji signifikansi terhadap masing-masing koefisien (uji Wald):")
print(cph.summary)

"""Hazard Ratio"""

p_value = cph._compute_p_values()
hazard_ratios = cph.hazard_ratios_.tolist()
print('p_value', p_value)
print('hazard_ratios', hazard_ratios)

# import numpy as np

# # Koefisien untuk fitur likuiditas dan salesgrowth setelah backward elimination
# DAR = 0.288985
# umur = -0.385422
# NPM = -0.271388

# # Menghitung hazard ratio
# DAR_hr = np.exp(DAR)
# umur_hr = np.exp(umur)
# NPM_hr = np.exp(NPM)

# print("Hazard Ratio DAR:", DAR_hr)
# print("Hazard Ratio Umur Perusahaan:", umur_hr)
# print("Hazard Ratio NPM:", NPM_hr)